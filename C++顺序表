#include<iostream>
using namespace std;
#define MAXLEN 100		//方便修改表的大小
typedef int datetype;	//方便修改表中存储数据类型

typedef struct			//定义顺序表
{
	datetype date[MAXLEN];
	int length;
}seplist;
seplist L;

void initlist (seplist *L)	//初始化列表
{
	L->length=0;
}


void createlist (seplist *L,int n)	//建立列表
{
	int i=0;
	printf("请输入%d个整数",n);
	for(i=0;i<n;i++)
		cin>>L->date[i];
	L->length=i;
}

//查找元素
int  getelem (seplist *L,int i,datetype *x)		//按位置i查找
{
	if(i<1||i>L->length)
		return 0;
	else
	{
		*x = L->date[i-1];
		return 1;
	}
}
int locate(seplist *L,datetype x)	//按值查找
{
	int i=0;
	while(i<L->length&&L->date[i]!=x)
		i++;
	if(i>=L->length)
		return 0;
	else
		return i+1;
}

int inselem (seplist *L,int i,datetype x) //插入元素
{
	if(L->length==MAXLEN)	//判断列表是否已满
	{
		cout<<"列表已满，无法执行插入操作";
		return -1;
	}
	if(i<1||i>L->length+1)	//判断插入位置是否合理
	{
		cout<<"插入位置有误";
		return 0;
	}
	if(i==L->length+1)		//判断插入位置是否为表尾（有点多余）
	{
		L->date[i-1]=x;
		L->length++;
		return 1;
	}
	for(int j=L->length-1;j>=i-1;j--)	//插入表中某一位置，插入点后各个结点均后移
		L->date[j+1]=L->date[j];
	L->date[i-1]=x;
	L->length++;
	return 1;
}

int delelem (seplist *L,int i,datetype *x)	//删除某个元素
{
	if(L->length==0)	//表空，不能删除
	{
		cout<<"列表为空";
		return 0;
	}
	if(i<1||i>L->length)
	{
		cout<<"输入位置有误";
		return 0;
	}
	*x=L->date[i-1];		//用指针变量x返回被删的元素值
	for(int j=i;j<L->length;j++)
		L->date[j-1]=L->date[j];
	L->length--;
	return 1;
}

void dislist(seplist *L)
{
	for(int i=0;i<L->length;i++)
		printf("列表第%d位为%d\n",i+1,L->date[i]);
}

void menu()		//目录函数
{
	cout<<endl;
	cout<<endl<<"顺序表的功能"<<endl;
	cout<<"----------------------------"<<endl;
	cout<<"建立顺序表          --1"<<endl;
	cout<<"插入元素            --2"<<endl;
	cout<<"删除元素            --3"<<endl;
	cout<<"按位置查找元素      --4"<<endl;
	cout<<"按元素值查找元素位置--5"<<endl;
	cout<<"顺序表的大小        --6"<<endl;
	cout<<"返回                --0"<<endl;
	cout<<"----------------------------"<<endl;
	cout<<"请输入菜单号（0-6）：";
}

void mymain()
{
	seplist L;
	datetype x;
	int n,i,loc;
	char ch1,ch2,a;
	ch1='y';
	menu();
	while(ch1=='y'||ch1=='Y')
	{
		cin>>ch2;
		getchar();
		switch(ch2)
		{
		case '1':
			initlist(&L);
			cout<<"请输入将要建立线性表的个数：";
			cin>>n;
			createlist(&L,n);
			cout<<"建立的列表为："<<endl;
			dislist(&L);
			break;
		case '2':
			cout<<"请输入需要将元素插在那个位置：";
			cin>>i;
			cout<<"请输入需要插入的元素值：";
			cin>>x;
			if(inselem(&L,i,x))
			{
				printf("已成功在%d的位置上插入%d，插入后的列表为：\n",i,x);
				dislist(&L);
			}
			else
				cout<<"输入有误";		//这个位置可以增加一个’是否重试‘的功能
			break;		
		case '3':
			cout<<"请输入要删除元素的地址：";
			cin>>i;
			if(delelem(&L,i,&x))
			{
				printf("已成功删除第%i位上的%d，删除后的线性表为：\n",i,x);
				dislist(&L);
			}
			else
				cout<<"删除失败";
			break;
		case '4':
			cout<<"请输入要查找的元素位置：";
			cin>>i;
			if(getelem(&L,i,&x))
				printf("当前表中第%d位的元素为%d",i,x);
			else
				cout<<"查找失败";
			break;
		case '5':
			cout<<"请输入要查找的元素值：";
			cin>>x;
			loc=locate(&L,x);
			if(loc)
				printf("该元素的在表中的位置为%d",loc);
			else
				cout<<"查无此元素";
			break;
		case '6':
			printf("当前线性表的长度为：%d\n",L.length);
			break;
		case '0':
			ch1='n';
			break;
		default:
			cout<<"输入有误，请在0-6中选择";
			break;
		}
		if(ch2!='0')
		{
			cout<<endl<<"按回车键继续，按任意键返回主菜单"<<endl;
			a=getchar();
			if(a!='\xA')
			{
				getchar();
				ch1='n';
			}
		}
	}

}
int main()
{
	mymain();
	return 0;
}


